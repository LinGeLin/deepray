ARG CUDA_DOCKER_VERSION=11.3.1-cudnn8-devel-ubuntu20.04
FROM nvidia/cuda:${CUDA_DOCKER_VERSION}

# Arguments for the build. CUDA_DOCKER_VERSION needs to be repeated because
# the first usage only applies to the FROM tag.
# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully
ARG CUDA_DOCKER_VERSION=11.3.1-cudnn8-devel-ubuntu20.04
ARG TENSORFLOW_VERSION=2.11.0

ARG PYTHON_VERSION=3.8

# to avoid interaction with apt-get
ENV DEBIAN_FRONTEND=noninteractive

# Set default shell to /bin/bash
SHELL ["/bin/bash", "-euo", "pipefail", "-c"]

# Comment it if you are not in China
RUN sed -i "s@http://.*archive.ubuntu.com@http://mirrors.tuna.tsinghua.edu.cn@g" /etc/apt/sources.list
RUN sed -i "s@http://.*security.ubuntu.com@http://mirrors.tuna.tsinghua.edu.cn@g" /etc/apt/sources.list

RUN apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \
    wget

# Extract ubuntu distribution version and download the corresponding key.
# This is to fix CI failures caused by the new rotating key mechanism rolled out by Nvidia.
# Refer to https://forums.developer.nvidia.com/t/notice-cuda-linux-repository-key-rotation/212771 for more details.
# RUN DIST=$(echo ${CUDA_DOCKER_VERSION#*ubuntu} | sed 's/\.//'); \
# apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu${DIST}/x86_64/3bf863cc.pub && \
# apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu${DIST}/x86_64/7fa2af80.pub

RUN DIST=$(echo ${CUDA_DOCKER_VERSION#*ubuntu} | sed 's/\.//'); \
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb && \
    dpkg -i cuda-keyring_1.0-1_all.deb && \
    sed -i '/developer\.download\.nvidia\.com\/compute\/cuda\/repos/d' /etc/apt/sources.list.d/* && \
    sed -i '/developer\.download\.nvidia\.com\/compute\/machine-learning\/repos/d' /etc/apt/sources.list.d/*
RUN apt-get update

RUN apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \
    build-essential \
    g++-7 \
    gdb \
    git \
    curl \
    vim \
    rsync \
    tmux \
    ca-certificates \
    s3fs \
    libjpeg-dev \
    libpng-dev \
    python${PYTHON_VERSION} \
    python${PYTHON_VERSION}-dev \
    python${PYTHON_VERSION}-distutils \
    librdmacm1 \
    libibverbs1 \
    ibverbs-providers \
    openssh-client \
    openssh-server \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line
# renovate: datasource=github-releases depName=Kitware/CMake
ARG CMAKE_VERSION=3.22.5
RUN wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.sh \
    -q -O /tmp/cmake-install.sh \
    && chmod u+x /tmp/cmake-install.sh \
    && mkdir /usr/bin/cmake \
    && /tmp/cmake-install.sh --skip-license --prefix=/usr \
    && rm /tmp/cmake-install.sh && \
    cmake --version

# Install Open MPI
RUN wget --progress=dot:mega -O /tmp/openmpi-4.1.4-bin.tar.gz https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.4.tar.gz && \
    cd /tmp && tar -zxf /tmp/openmpi-4.1.4-bin.tar.gz && \
    mkdir openmpi-4.1.4/build && cd openmpi-4.1.4/build && ../configure --prefix=/usr/local && \
    make -j all && make install && ldconfig && \
    mpirun --version

# Allow OpenSSH to talk to containers without asking for confirmation
RUN mkdir -p /var/run/sshd
RUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \
    echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && \
    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config

RUN ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python

RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

# Install Bazelisk
RUN wget -O /usr/local/bin/bazel https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-$([ $(uname -m) = "aarch64" ] && echo "arm64" || echo "amd64") \
    && chmod +x /usr/local/bin/bazel

RUN pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple

RUN pip install --no-cache-dir future typing packaging
RUN pip install --no-cache-dir \
    tensorflow==${TENSORFLOW_VERSION}

COPY requirements_dev.txt /tmp/
RUN pip install --requirement /tmp/requirements_dev.txt

# Install Horovod, temporarily using CUDA stubs
# WORKDIR /horovod
# COPY . .
# RUN python setup.py sdist && \
#     ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \
#     bash -c "HOROVOD_GPU_OPERATIONS=NCCL HOROVOD_WITH_TENSORFLOW=1 pip install --no-cache-dir -v $(ls /horovod/dist/horovod-*.tar.gz)" && \
#     horovodrun --check-build && \
#     ldconfig
RUN HOROVOD_WITH_MPI=1 HOROVOD_GPU_OPERATIONS=NCCL HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_KERAS=1 pip install --no-cache-dir horovod==0.28.1

# Check all frameworks are working correctly. Use CUDA stubs to ensure CUDA libs can be found correctly
# when running on CPU machine
RUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \
    python -c "import horovod.tensorflow as hvd; hvd.init()" && \
    horovodrun --check-build && \
    ldconfig

RUN pip install --no-deps --force-reinstall \
    https://dl.dropboxusercontent.com/s/ieivkte14h62cqq/tensorflow_recommenders_addons_gpu-0.5.0.dev0-cp38-cp38-linux_x86_64.whl \
    https://github.com/deepray-AI/deepray/releases/download/latest/deepray-0.21.0.dev0-cp38-cp38-linux_x86_64.whl


# This will change the content of the core_pattern file to ./core.%e.%p, where %e represents the name of the 
# executable file and %p represents the process ID. This way, when a program crashes, the core dump file will 
# be saved to the current directory with a filename in the format of core.<executable_name>.<process_id>.
# RUN echo "./core.%e.%p" | tee /proc/sys/kernel/core_pattern

RUN echo -e "\
# Set breakpoint() in Python to call pudb \n\
export PYTHONBREAKPOINT="pudb.set_trace" \n\
# 关理代理\n\
function proxy_off(){\n\
    unset http_proxy\n\
    unset https_proxy\n\
    unset all_proxy\n\
    echo -e "代理已关闭"\n\
}\n\
# 打开代理\n\
function proxy_on() {\n\
    export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"\n\
    export http_proxy="http://0.0.0.0:7890"\n\
    export https_proxy="http://0.0.0.0:7890"\n\
    export all_proxy="socks5://0.0.0.0:7890"\n\
    echo -e "代理已开启"\n\
}\n\
    " > /root/.bashrc